 chartOptions: Highcharts.Options = {
    chart: {
      type: 'solidgauge',
      height: 400,
      spacingTop: 60 // ✅ Add space manually to avoid collision with legend
    },

    title: {
      text: null
    },
    credits: {
      enabled: false
    },
    tooltip: {
      enabled: true,
      borderWidth: 0,
      backgroundColor: 'none',
      shadow: false,
      style: {
        fontSize: '16px'
      },
      valueSuffix: '%',
      pointFormat:
        '{series.name}<br><span style="font-size:2em; color: {point.color}; font-weight: bold">{point.y}</span>',
      positioner: function (labelWidth) {
        return {
          x: (this.chart.chartWidth - labelWidth) / 2 - 50,
          y: this.chart.plotHeight * 0.5
        };
      }
    },
    legend: {
      enabled: true,
      layout: 'horizontal',
      align: 'center',
      verticalAlign: 'top', // ✅ Top position
      floating: false,
      itemStyle: {
        fontSize: '11px',       // ✅ Smaller text
        fontWeight: 'normal'
      },
      itemMarginTop: 2,
      itemMarginBottom: 2
    },
    pane: {
      startAngle: -90,
      endAngle: 90,
      center: ['50%', '65%'],
      size: '100%',
      background: []
    },
    yAxis: {
      min: 0,
      max: 100,
      lineWidth: 0,
      tickPositions: []
    },
    plotOptions: {
      solidgauge: {
        rounded: false,
        dataLabels: {
          enabled: false,
          y: -30,
          borderWidth: 0,
          useHTML: true
        }
      }
    },
    series: []
  };

  ngOnInit(): void {
    this.loadBidChartData();
  }

  loadBidChartData(): void {
    const kpiData = [
      { kpi: 'Move', value: 80, maxValue: 100 },
      { kpi: 'Exercise Tracking', value: 65, maxValue: 100 },
      { kpi: 'Stand Sessions', value: 50, maxValue: 100 },
      { kpi: 'Focus Time', value: 40, maxValue: 100 },
      { kpi: 'Energy Burn Level', value: 30, maxValue: 100 }
    ];

    const arcThickness = 12;
    const arcSpacing = 0;
    const startOuterRadius = 95;

    const series: Highcharts.SeriesSolidgaugeOptions[] = [];
    const background: any[] = [];

    kpiData.forEach((kpi, index) => {
      const color = Highcharts.getOptions().colors![index % Highcharts.getOptions().colors!.length];
      const outerRadius = startOuterRadius - index * (arcThickness + arcSpacing);
      const innerRadius = outerRadius - arcThickness;

      background.push({
        outerRadius: `${outerRadius}%`,
        innerRadius: `${innerRadius}%`,
        shape: 'arc',
        backgroundColor: Highcharts.color(color).setOpacity(0.3).get(),
        borderWidth: 0
      });

      series.push({
        name: kpi.kpi,
        type: 'solidgauge',
        showInLegend: true,
        color: color,
        data: [
          {
            y: (kpi.value / kpi.maxValue) * 100,
            radius: `${outerRadius}%`,
            innerRadius: `${innerRadius}%`,
            color: color
          }
        ],
        dataLabels: {
          enabled: true,
          format: '{y}%',
          borderWidth: 0,
          useHTML: false,
          style: {
            fontSize: '13px',
            fontWeight: 'bold',
            color: '#fff',
            textOutline: 'none'
          },
          align: 'center',
          verticalAlign: 'middle',
          y: -((outerRadius + innerRadius) / 2 - 50)
        }
      });
    });

    if (this.chartOptions.pane) {
      this.chartOptions.pane.background = background;
    }

    this.chartOptions.series = series;
    this.updateFlag = true;
  }
